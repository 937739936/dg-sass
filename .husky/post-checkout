#!/usr/bin/env sh
# . "$(dirname -- "$0")/_/husky.sh"



 main_branch=$(git symbolic-ref --short HEAD)



  if [ "$1" = "tag" ]; then

     main_branch="master"
    echo "Tag has been checked out."
    # 在这里添加你的自定义逻辑
  else
    echo "No tag checked out."
  fi


 branch_name=$(git symbolic-ref --short HEAD 2>/dev/null)
 
  if [ -z "$branch_name" ]; then
      main_branch="master"
      echo "You are in a detached HEAD state. 切换错误，切换到默认分支master"
      # 这里可以添加更多的逻辑，比如提示用户检出到一个分支等。
  else
      echo "Current branch is $branch_name"
  fi


#  echo "切换分支当前主仓库分支$main_branch, 当前子仓库分支$branch"

  git submodule update

  cd submodules

  # 当前子仓库分支 
  # echo "\033[33m 当前子仓库分支，正在暂存数据 \033[0m"
  # git add .
  # git commit -m "子仓库暂存"


  local_branches=$(git branch --format='%(refname:short)')

  # 检查当前分支是否在本地分支列表中
  if echo "$local_branches" | grep -q "$main_branch"; then

      echo "\033[32m 当前分支是在本地已经存在，切换中... \033[0m"

      git checkout "$main_branch"
      # 判断当前分支是否是远程分支
      if git branch -r | grep -q "origin/$main_branch"; then
       git pull
      fi


  else
      echo "\033[31m 当前分支不是本地分支, 检测当前分支是否是远程分支.... \033[0m"
      #  判断子仓库的远程分支是否存在
        if git branch -r | grep -q "origin/$main_branch"; then
            echo "\033[32m 子仓库远程分支 $main_branch 存在,正在切换分支 \033[0m"
            git checkout "$main_branch"
            echo "\033[32m 子仓库正在拉取最新代码 \033[0m"
            git pull
            echo "\033[32m 更新完成  \033[0m"
        else
          echo "\033[31m 分支 $main_branch 不存在。\033[0m"
          echo "\033[32m 子仓库正在创建分支 $main_branch \033[0m"
          git checkout -b "$main_branch"



        fi


  fi




#   sub_branch=$(git symbolic-ref --short HEAD)


#   echo "切换分支 当前主仓库分支$main_branch, 当前子仓库分支 $sub_branch"

# cd ..
#   exit 1

 